trait Int['a] {}

impl Int[int] {}
impl Int[i8] {}
impl Int[i16] {}
impl Int[i32] {}

impl ToStr[int] {
    fn to_str(self: int) -> string {
        len = 1
        i = abs(self)
        while true {
            i /= 10
            len += 1
            if i == 0 {
                break
            }
        }

        if self < 0 {
            len += 1
        }

        raw_ptr = new(u8, len)
        i = abs(self)
        ptr = ptr_add(raw_ptr, len - 1)
        while true {
            *ptr = ('0' as u8) + ((i%10) as u8)
            ptr = ptr_sub(ptr, 1)
            i /= 10
            if i == 0 {
                break
            }
        }

        if self < 0 {
            *ptr = '-' as u8
        }
        
        string { raw_ptr, len }
    }
}
