struct DateTime {
    year: usize
    month: usize
    day: usize
    hour: usize
    minute: usize
    second: usize
    millisecond: usize
    offset: usize
}

impl DateTime {
    const ONE_MINUTE = 60
    const ONE_HOUR = 60 * ONE_MINUTE

    static fn now() -> DateTime {
        y, mo, day, hr, min, sec, ms, offset = _builtin_now()
        DateTime(y, mo, day, hr, min, sec, ms, offset)
    }

    static fn utc() -> DateTime {
        y, mo, day, hr, min, sec, ms, offset = _builtin_utcnow()
        DateTime(y, mo, day, hr, min, sec, ms, offset)
    }

    fn iso() -> String {
        ONE_MINUTE = 60
        ONE_HOUR = 60 * ONE_MINUTE

        y = self.year.to_string()
        mo = self.month.to_string().lpad("0", 2)
        day = self.day.to_string().lpad("0", 2)
        hr = self.hour.to_string().lpad("0", 2)
        min = self.minute.to_string().lpad("0", 2)
        sec = self.second.to_string().lpad("0", 2)
        ms = self.millisecond.to_string().lpad("0", 3)

        mut o = self.offset
        offset = if o != 0 {
            // offset is in seconds, convert to +/-HH:MM:SS
            sign = if o < 0 {
                o = o * -1 // TODO: abs(...)?
                "-"
            } else {
                "+"
            }
            offset_hours = o / ONE_HOUR
            o = o - (offset_hours * ONE_HOUR)
            offset_min = if o > ONE_HOUR {
                (o - ONE_HOUR) / ONE_MINUTE
            } else {
                0
            }

            o = o - (offset_min * ONE_MINUTE)
            offset_sec = if o > ONE_MINUTE {
                o - ONE_MINUTE
            } else {
                0
            }

            // NOTE: ISO format does not have offset second
            sign + offset_hours.to_string().lpad("0", 2) + ":" + offset_min.to_string().lpad("0", 2)
        } else {
            "Z"
        }

        y + "-" + mo + "-" + day + "T" + hr + ":" + min + ":" + sec + "." + ms + offset
    }
}

impl DateTime: ToString {
    fn to_string() -> String => self.iso()
}
