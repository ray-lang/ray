struct DateTime {
    year: uint
    month: uint
    day: uint
    hour: uint
    minute: uint
    second: uint
    millisecond: uint
    offset: uint
}

impl DateTime {
    const ONE_MINUTE = 60
    const ONE_HOUR = 60 * ONE_MINUTE

    fn now() -> DateTime {
        y, mo, day, hr, min, sec, ms, offset = _builtin_now()
        DateTime(y, mo, day, hr, min, sec, ms, offset)
    }

    fn utc() -> DateTime {
        y, mo, day, hr, min, sec, ms, offset = _builtin_utcnow()
        DateTime(y, mo, day, hr, min, sec, ms, offset)
    }

    fn iso(self) -> string {
        ONE_MINUTE = 60
        ONE_HOUR = 60 * ONE_MINUTE

        y = self.year.to_str()
        mo = self.month.to_str().lpad("0", 2)
        day = self.day.to_str().lpad("0", 2)
        hr = self.hour.to_str().lpad("0", 2)
        min = self.minute.to_str().lpad("0", 2)
        sec = self.second.to_str().lpad("0", 2)
        ms = self.millisecond.to_str().lpad("0", 3)

        mut o = self.offset
        offset = if o != 0 {
            // offset is in seconds, convert to +/-HH:MM:SS
            sign = if o < 0 {
                o = abs(o)
                "-"
            } else {
                "+"
            }
            offset_hours = o / ONE_HOUR
            o = o - (offset_hours * ONE_HOUR)
            offset_min = if o > ONE_HOUR {
                (o - ONE_HOUR) / ONE_MINUTE
            } else {
                0
            }

            o = o - (offset_min * ONE_MINUTE)
            offset_sec = if o > ONE_MINUTE {
                o - ONE_MINUTE
            } else {
                0
            }

            // NOTE: ISO format does not have offset second
            sign + offset_hours.to_string().lpad("0", 2) + ":" + offset_min.to_string().lpad("0", 2)
        } else {
            "Z"
        }

        y + "-" + mo + "-" + day + "T" + hr + ":" + min + ":" + sec + "." + ms + offset
    }
}

impl ToStr[DateTime] {
    fn to_str() -> string => self.iso()
}
