
struct RangeIterator<T: ForwardIndex> {
    range: Range<T>
    index: T
}

impl<E: ForwardIndex> RangeIterator<E>: Iterator<E> {
    fn next() -> (E?, Bool) {
        i = self.index
        if self.range.contains(i) {
            self.index = self.index.forward()
            (i, true)
        } else {
            (nil, false)
        }
    }
}

impl<E: ForwardIndex> Range<E> {
    extern fn start() -> E
    extern fn end() -> E
    extern fn is_inclusive() -> Bool

    fn contains(other: E) -> Bool {
        if self.is_inclusive() {
            other >= self.start() && other <= self.end()
        } else {
            other >= self.start() && other < self.end()
        }
    }
}

impl<T: ForwardIndex> Range<T>: Iterable<T, RangeIterator<T>> {
    fn iter() -> RangeIterator<T> => RangeIterator(range: self, index: self.start())
}
