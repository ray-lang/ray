import builtins
import gc
import libc
import platform

impl String {
    static fn deinit(str: String) {
        ptr = addrof(str)
        for i in 0..<str.len() {
            gc.decref(str[i])
        }

        rawlist_ptr = ptr.get(0)
        builtins::rawlist_free(rawlist_ptr)
        libc::free(ptr)
    }

    static fn from_raw(raw: RawString) -> String {
        len = libc::strlen(raw) as Int
        str = String::reserve(len)

        // get the raw bytes
        ptr = addrof(raw)
        mut bytes = ptr.get_bytes(len)

        // loop through each byte, converting to Chars
        mut idx = 0
        while bytes.len() > 0 {
            ch = Char::from_bytes(bytes) else break
            byte_count = ch.byte_count()
            bytes = bytes.slice(byte_count, bytes.len())
            str[idx] = ch
            idx += 1
        }

        str
    }

    static fn from_bytes(bytes: Array<UInt8>) -> String {
        // the character array is going to be at least bytes.len() long
        char_arr: Array<Char> = Array::reserve(bytes.len())

        mut b = bytes
        // loop through each byte, converting to Chars
        mut idx = 0
        while b.len() > 0 {
            ch = Char::from_bytes(b) else break
            byte_count = ch.byte_count()
            b = b.slice(byte_count, b.len())
            if idx < char_arr.len() {
                char_arr[idx] = ch
            } else {
                char_arr.append(ch)
            }
            idx += 1
        }

        str = String::reserve(char_arr.len())
        for i in 0..<char_arr.len() {
            str[i] = char_arr[i] else break
        }
        str
    }

    static fn from_cstring(cstr: RawString) -> String {
        cptr = addrof(cstr)
        mut offset = 0

        byte_arr: Array<UInt8> = []
        loop {
            b = cptr.get_byte(offset)
            if b == 0 {
                break
            }
            byte_arr.append(b)
            offset += 1
        }

        String::from_bytes(byte_arr)
    }

    static fn reserve(size: Int = 0) -> String {
        raw = builtins::rawlist_new(size)
        builtins::make_struct(raw, String, String::deinit)
    }

    fn len() -> Int {
        ptr = addrof(self) // convert self to pointer
        value_ptr = ptr.get(0) // get the value pointer
        builtins::rawlist_len(value_ptr)
    }

    fn bytes() -> Array<UInt8> {
        // NOTE: len is the number of Chars not the number of bytes
        len = self.len()
        arr: Array<UInt8> = Array::reserve(len)

        mut idx = 0
        for i in 0..<len {
            ch = self[i] else break
            ch_bytes = ch.bytes()
            for b in ch_bytes {
                if idx < arr.len() {
                    arr[idx] = b
                } else {
                    arr.append(b)
                }
                idx += 1
            }
        }

        arr
    }

    fn lpad(prefix: String, max_len: Int) -> String {
        len = self.len()
        mut s = self
        for i in len..<max_len {
            s = prefix + s
        }
        s
    }

    fn rpad(suffix: String, max_len: Int) -> String {
        len = self.len()
        mut s = self
        for i in len..<max_len {
            s += suffix
        }
        s
    }

    fn substring(start: Int, end: Int = -1) -> String {
        mut new_end = end
        if end == -1 {
            new_end = self.len()
        }

        size = new_end - start
        s = String::reserve(size)
        for i in start..<new_end {
            s[i] = self[i] else break
        }
        s
    }

    fn to_raw() -> RawString {
        len = self.len().to_i32() + 1
        ptr = libc::malloc(len)
        ptr.set_bytes(0, self.bytes())
        ptr.set_byte((len-1).to_int(), 0) // set the NUL character
        ptr as RawString
    }
}

impl String: ToString {
    fn to_string() -> String => self
}

impl String: Repr {
    fn repr() -> String => "\"" + self + "\""
}

impl String: Subscriptable<Int, Char> {
    fn get(i: Int) -> Char? {
        ptr = addrof(self)
        arr = ptr.get(0)
        char_ptr = builtins::rawlist_get(arr, i)
        if !char_ptr.is_nil() {
            char_ptr as Char
        } else {
            nil
        }
    }

    fn set(i: Int, c: Char) {
        ptr = addrof(self)
        arr = ptr.get(0)
        builtins::rawlist_set(arr, i, c)
    }
}

impl<T: ToString> String: Add<T> {
    fn add(other: T) -> String {
        other_str = other.to_string()
        self_len = self.len()
        other_len = other_str.len()
        new_len = self_len + other_len
        new_str = String::reserve(new_len)

        for i in 0..<self_len {
            new_str[i] = self[i] else break
        }

        for i in 0..<other_len {
            new_str[i+self_len] = other_str[i] else break
        }

        new_str
    }
}

impl String: Hashable {
    fn hash() -> Int64 {
        len = self.len()
        if len == 0 {
            return 0
        }

        p = (self[0] else return 0).to_int().to_i64()
        mut x = HASH_PREFIX
        x ^= p << 7
        for i in 1..<len {
            y = self[i] else return 0
            x = (1000003_i64 * x) ^ y.to_int().to_i64()
        }

        x ^= len.to_i64()
        x ^= HASH_SUFFIX
        if x == -1 {
            x = -2
        }
        x
    }
}
