///
/// Assembly functions
///
/// These are not actual functions. The compiler sees these and generates raw instructions.
///

extern fn addi(a: Int, b: Int) -> Int
extern fn subi(a: Int, b: Int) -> Int
extern fn muli(a: Int, b: Int) -> Int
extern fn divi(a: Int, b: Int) -> Int
extern fn modi(a: Int, b: Int) -> Int
extern fn ori(a: Int, b: Int) -> Int
extern fn andi(a: Int, b: Int) -> Int
extern fn xori(a: Int, b: Int) -> Int
extern fn ashli(a: Int, b: Int) -> Int
extern fn ashri(a: Int, b: Int) -> Int
extern fn lshri(a: Int, b: Int) -> Int
extern fn lshli(a: Int, b: Int) -> Int
extern fn lti(a: Int, b: Int) -> UInt8
extern fn lteqi(a: Int, b: Int) -> UInt8
extern fn gti(a: Int, b: Int) -> UInt8
extern fn gteqi(a: Int, b: Int) -> UInt8
extern fn eqi(a: Int, b: Int) -> UInt8
extern fn neqi(a: Int, b: Int) -> UInt8

extern fn addi8(a: Int8, b: Int8) -> Int8
extern fn subi8(a: Int8, b: Int8) -> Int8
extern fn muli8(a: Int8, b: Int8) -> Int8
extern fn divi8(a: Int8, b: Int8) -> Int8
extern fn modi8(a: Int8, b: Int8) -> Int8
extern fn ori8(a: Int8, b: Int8) -> Int8
extern fn andi8(a: Int8, b: Int8) -> Int8
extern fn xori8(a: Int8, b: Int8) -> Int8
extern fn ashli8(a: Int8, b: Int8) -> Int8
extern fn ashri8(a: Int8, b: Int8) -> Int8
extern fn lshri8(a: Int8, b: Int8) -> Int8
extern fn lshli8(a: Int8, b: Int8) -> Int8
extern fn lti8(a: Int8, b: Int8) -> UInt8
extern fn lteqi8(a: Int8, b: Int8) -> UInt8
extern fn gti8(a: Int8, b: Int8) -> UInt8
extern fn gteqi8(a: Int8, b: Int8) -> UInt8
extern fn eqi8(a: Int8, b: Int8) -> UInt8
extern fn neqi8(a: Int8, b: Int8) -> UInt8

extern fn addi16(a: Int16, b: Int16) -> Int16
extern fn subi16(a: Int16, b: Int16) -> Int16
extern fn muli16(a: Int16, b: Int16) -> Int16
extern fn divi16(a: Int16, b: Int16) -> Int16
extern fn modi16(a: Int16, b: Int16) -> Int16
extern fn ori16(a: Int16, b: Int16) -> Int16
extern fn andi16(a: Int16, b: Int16) -> Int16
extern fn xori16(a: Int16, b: Int16) -> Int16
extern fn ashli16(a: Int16, b: Int16) -> Int16
extern fn ashri16(a: Int16, b: Int16) -> Int16
extern fn lshri16(a: Int16, b: Int16) -> Int16
extern fn lshli16(a: Int16, b: Int16) -> Int16
extern fn lti16(a: Int16, b: Int16) -> UInt8
extern fn lteqi16(a: Int16, b: Int16) -> UInt8
extern fn gti16(a: Int16, b: Int16) -> UInt8
extern fn gteqi16(a: Int16, b: Int16) -> UInt8
extern fn eqi16(a: Int16, b: Int16) -> UInt8
extern fn neqi16(a: Int16, b: Int16) -> UInt8

extern fn addi32(a: Int32, b: Int32) -> Int32
extern fn subi32(a: Int32, b: Int32) -> Int32
extern fn muli32(a: Int32, b: Int32) -> Int32
extern fn divi32(a: Int32, b: Int32) -> Int32
extern fn modi32(a: Int32, b: Int32) -> Int32
extern fn ori32(a: Int32, b: Int32) -> Int32
extern fn andi32(a: Int32, b: Int32) -> Int32
extern fn xori32(a: Int32, b: Int32) -> Int32
extern fn ashli32(a: Int32, b: Int32) -> Int32
extern fn ashri32(a: Int32, b: Int32) -> Int32
extern fn lshri32(a: Int32, b: Int32) -> Int32
extern fn lshli32(a: Int32, b: Int32) -> Int32
extern fn lti32(a: Int32, b: Int32) -> UInt8
extern fn lteqi32(a: Int32, b: Int32) -> UInt8
extern fn gti32(a: Int32, b: Int32) -> UInt8
extern fn gteqi32(a: Int32, b: Int32) -> UInt8
extern fn eqi32(a: Int32, b: Int32) -> UInt8
extern fn neqi32(a: Int32, b: Int32) -> UInt8

extern fn addi64(a: Int64, b: Int64) -> Int64
extern fn subi64(a: Int64, b: Int64) -> Int64
extern fn muli64(a: Int64, b: Int64) -> Int64
extern fn divi64(a: Int64, b: Int64) -> Int64
extern fn modi64(a: Int64, b: Int64) -> Int64
extern fn ori64(a: Int64, b: Int64) -> Int64
extern fn andi64(a: Int64, b: Int64) -> Int64
extern fn xori64(a: Int64, b: Int64) -> Int64
extern fn ashli64(a: Int64, b: Int64) -> Int64
extern fn ashri64(a: Int64, b: Int64) -> Int64
extern fn lshri64(a: Int64, b: Int64) -> Int64
extern fn lshli64(a: Int64, b: Int64) -> Int64
extern fn lti64(a: Int64, b: Int64) -> UInt8
extern fn lteqi64(a: Int64, b: Int64) -> UInt8
extern fn gti64(a: Int64, b: Int64) -> UInt8
extern fn gteqi64(a: Int64, b: Int64) -> UInt8
extern fn eqi64(a: Int64, b: Int64) -> UInt8
extern fn neqi64(a: Int64, b: Int64) -> UInt8

extern fn addu(a: UInt, b: UInt) -> UInt
extern fn subu(a: UInt, b: UInt) -> UInt
extern fn mulu(a: UInt, b: UInt) -> UInt
extern fn divu(a: UInt, b: UInt) -> UInt
extern fn modu(a: UInt, b: UInt) -> UInt
extern fn oru(a: UInt, b: UInt) -> UInt
extern fn andu(a: UInt, b: UInt) -> UInt
extern fn xoru(a: UInt, b: UInt) -> UInt
extern fn ashlu(a: UInt, b: UInt) -> UInt
extern fn ashru(a: UInt, b: UInt) -> UInt
extern fn lshru(a: UInt, b: UInt) -> UInt
extern fn lshlu(a: UInt, b: UInt) -> UInt
extern fn ltu(a: UInt, b: UInt) -> UInt8
extern fn ltequ(a: UInt, b: UInt) -> UInt8
extern fn gtu(a: UInt, b: UInt) -> UInt8
extern fn gtequ(a: UInt, b: UInt) -> UInt8
extern fn equ(a: UInt, b: UInt) -> UInt8
extern fn nequ(a: UInt, b: UInt) -> UInt8

extern fn addu8(a: UInt8, b: UInt8) -> UInt8
extern fn subu8(a: UInt8, b: UInt8) -> UInt8
extern fn mulu8(a: UInt8, b: UInt8) -> UInt8
extern fn divu8(a: UInt8, b: UInt8) -> UInt8
extern fn modu8(a: UInt8, b: UInt8) -> UInt8
extern fn oru8(a: UInt8, b: UInt8) -> UInt8
extern fn andu8(a: UInt8, b: UInt8) -> UInt8
extern fn xoru8(a: UInt8, b: UInt8) -> UInt8
extern fn ashlu8(a: UInt8, b: UInt8) -> UInt8
extern fn ashru8(a: UInt8, b: UInt8) -> UInt8
extern fn lshru8(a: UInt8, b: UInt8) -> UInt8
extern fn lshlu8(a: UInt8, b: UInt8) -> UInt8
extern fn ltu8(a: UInt8, b: UInt8) -> UInt8
extern fn ltequ8(a: UInt8, b: UInt8) -> UInt8
extern fn gtu8(a: UInt8, b: UInt8) -> UInt8
extern fn gtequ8(a: UInt8, b: UInt8) -> UInt8
extern fn equ8(a: UInt8, b: UInt8) -> UInt8
extern fn nequ8(a: UInt8, b: UInt8) -> UInt8

extern fn addu16(a: UInt16, b: UInt16) -> UInt16
extern fn subu16(a: UInt16, b: UInt16) -> UInt16
extern fn mulu16(a: UInt16, b: UInt16) -> UInt16
extern fn divu16(a: UInt16, b: UInt16) -> UInt16
extern fn modu16(a: UInt16, b: UInt16) -> UInt16
extern fn oru16(a: UInt16, b: UInt16) -> UInt16
extern fn andu16(a: UInt16, b: UInt16) -> UInt16
extern fn xoru16(a: UInt16, b: UInt16) -> UInt16
extern fn ashlu16(a: UInt16, b: UInt16) -> UInt16
extern fn ashru16(a: UInt16, b: UInt16) -> UInt16
extern fn lshru16(a: UInt16, b: UInt16) -> UInt16
extern fn lshlu16(a: UInt16, b: UInt16) -> UInt16
extern fn ltu16(a: UInt16, b: UInt16) -> UInt8
extern fn ltequ16(a: UInt16, b: UInt16) -> UInt8
extern fn gtu16(a: UInt16, b: UInt16) -> UInt8
extern fn gtequ16(a: UInt16, b: UInt16) -> UInt8
extern fn equ16(a: UInt16, b: UInt16) -> UInt8
extern fn nequ16(a: UInt16, b: UInt16) -> UInt8

extern fn addu32(a: UInt32, b: UInt32) -> UInt32
extern fn subu32(a: UInt32, b: UInt32) -> UInt32
extern fn mulu32(a: UInt32, b: UInt32) -> UInt32
extern fn divu32(a: UInt32, b: UInt32) -> UInt32
extern fn modu32(a: UInt32, b: UInt32) -> UInt32
extern fn oru32(a: UInt32, b: UInt32) -> UInt32
extern fn andu32(a: UInt32, b: UInt32) -> UInt32
extern fn xoru32(a: UInt32, b: UInt32) -> UInt32
extern fn ashlu32(a: UInt32, b: UInt32) -> UInt32
extern fn ashru32(a: UInt32, b: UInt32) -> UInt32
extern fn lshru32(a: UInt32, b: UInt32) -> UInt32
extern fn lshlu32(a: UInt32, b: UInt32) -> UInt32
extern fn ltu32(a: UInt32, b: UInt32) -> UInt8
extern fn ltequ32(a: UInt32, b: UInt32) -> UInt8
extern fn gtu32(a: UInt32, b: UInt32) -> UInt8
extern fn gtequ32(a: UInt32, b: UInt32) -> UInt8
extern fn equ32(a: UInt32, b: UInt32) -> UInt8
extern fn nequ32(a: UInt32, b: UInt32) -> UInt8

extern fn addu64(a: UInt64, b: UInt64) -> UInt64
extern fn subu64(a: UInt64, b: UInt64) -> UInt64
extern fn mulu64(a: UInt64, b: UInt64) -> UInt64
extern fn divu64(a: UInt64, b: UInt64) -> UInt64
extern fn modu64(a: UInt64, b: UInt64) -> UInt64
extern fn oru64(a: UInt64, b: UInt64) -> UInt64
extern fn andu64(a: UInt64, b: UInt64) -> UInt64
extern fn xoru64(a: UInt64, b: UInt64) -> UInt64
extern fn ashlu64(a: UInt64, b: UInt64) -> UInt64
extern fn ashru64(a: UInt64, b: UInt64) -> UInt64
extern fn lshru64(a: UInt64, b: UInt64) -> UInt64
extern fn lshlu64(a: UInt64, b: UInt64) -> UInt64
extern fn ltu64(a: UInt64, b: UInt64) -> UInt8
extern fn ltequ64(a: UInt64, b: UInt64) -> UInt8
extern fn gtu64(a: UInt64, b: UInt64) -> UInt8
extern fn gtequ64(a: UInt64, b: UInt64) -> UInt8
extern fn equ64(a: UInt64, b: UInt64) -> UInt8
extern fn nequ64(a: UInt64, b: UInt64) -> UInt8
